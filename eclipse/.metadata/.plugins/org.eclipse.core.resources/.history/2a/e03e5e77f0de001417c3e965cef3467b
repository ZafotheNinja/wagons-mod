package com.shultzy88.wagons.model;

import net.minecraft.client.model.ModelBase;
import net.minecraft.client.model.ModelRenderer;
import net.minecraft.entity.Entity;

import org.lwjgl.opengl.GL11;

import com.shultzy88.wagons.entity.EntityCoveredWagon;

public class ModelCoveredWagon extends ModelBase
{
	// chassis
	public ModelRenderer wagonBase;

	public ModelRenderer frontAxle;

	public ModelRenderer wheel1; // wheel on front left
	public ModelRenderer wheel2; // wheel on front right
	public ModelRenderer wheel3; // wheel on back left
	public ModelRenderer wheel4; // wheel on back right

	protected int cycleIndex = 0;

	protected float[] undulationCycle = { 0F, 45F, 90F, 135F, 180F, 225F, 270F, 315F };

	public ModelCoveredWagon()
	{
		int textureWidth = 256;
		int textureHeight = 128;
		
		this.setTextureOffset("wagonbase.floor", 0, 0);
		this.setTextureOffset("wagonbase.frontpanel", 0, 0);
		this.setTextureOffset("wagonbase.backpanel", 0, 0);
		this.setTextureOffset("wagonbase.leftpanel", 0, 0);
		this.setTextureOffset("wagonbase.rightpanel", 0, 0);
		this.setTextureOffset("wagonbase.backaxle", 0, 0);
		this.setTextureOffset("wagonbase.footrest", 0, 0);
		this.setTextureOffset("wagonbase.seat", 0, 0);
		this.setTextureOffset("wagonbase.backrest", 0, 0);
		this.setTextureOffset("wagonbase.leftcover", 0, 0);
		this.setTextureOffset("wagonbase.rightcover", 0, 0);
		this.setTextureOffset("wagonbase.topcover", 0, 0);
		this.setTextureOffset("frontaxle.main", 0, 0);
		// TODO: add texture offset for tongue and yoke boxes
		this.setTextureOffset("wheelfrontleft.hub", 0, 0);
		this.setTextureOffset("wheelfrontleft.spoke1", 0, 0);
		this.setTextureOffset("wheelfrontleft.spoke2", 0, 0);

		/** main section of wagon */
		this.wagonBase = new ModelRenderer(this, "wagonbase");
		this.wagonBase.setRotationPoint(0F, 8F, -15F);
		this.wagonBase.addBox("floor", -16F, -1F, -9F, 32, 1, 48);
		this.wagonBase.addBox("frontpanel", -15F, -10F, -9F, 30, 9, 1);
		this.wagonBase.addBox("backpanel", -15F, -12F, 38F, 30, 11, 1);
		this.wagonBase.addBox("leftpanel", 15F, -12F, -9F, 1, 11, 48);
		this.wagonBase.addBox("rightpanel", -16F, -12F, -9F, 1, 11, 48);
		this.wagonBase.addBox("backaxle", -19F, 0F, 31F, 38, 2, 2);
		this.wagonBase.addBox("footrest", -12F, -5F, -15F, 24, 1, 6);
		this.wagonBase.addBox("seat", -15F, -10F, -8F, 30, 1, 6);
		this.wagonBase.addBox("backrest", -15F, -9F, -2F, 30, 6, 1);
		this.wagonBase.addBox("leftcover", 15F, -34F, -3F, 1, 22, 42);
		this.wagonBase.addBox("rightcover", -16F, -34F, -3F, 1, 22, 42);
		this.wagonBase.addBox("topcover", -15F, -35F, -3F, 30, 1, 42);
		
		/** axle is allowed to rotate on y-axis a child of model renderer */
		this.frontAxle = new ModelRenderer(this, "frontaxle");
		this.frontAxle.addBox("main", -19F, 1F, 0F, 38, 3, 2);
		this.wagonBase.addChild(frontAxle);
		
		/** front wheels are children of the front axle box list */
		this.wheel1 = new ModelRenderer(this, "wheelfrontleft");
		this.wheel1.addBox("hub", 19F, 1.5F, -0.5F, 2, 3, 3);
		this.wheel1.addBox("spoke1", 19F, -3F, 0.5F, 1, 4, 2);
		this.wheel1.addBox("spoke2", 19F, 0.5F, 3F, 1, 2, 4);
		this.frontAxle.addChild(wheel1);
		
	}

	@Override
	public void render(Entity entity, float time, float swingSuppress, float par4,
			float parAngleY, float parAngleX, float par7)
	{
		renderCoveredWagon((EntityCoveredWagon) entity, time, swingSuppress, par4,
				parAngleY, parAngleX, par7);

	}

	private void renderCoveredWagon(EntityCoveredWagon entity, float time,
			float swingSuppress, float par4, float parAngleY, float parAngleX, float par7)
	{
		GL11.glPushMatrix();
		wagonBase.render(par7);
		GL11.glPopMatrix();
	}

	@Override
	public void setRotationAngles(float time, float swingSuppress, float par3,
			float angleY, float angleX, float par6, Entity entity)
	{

	}

	/**
	 * Convert degrees to radians
	 * 
	 * @param degrees
	 * @return
	 */
	private float degToRad(float degrees)
	{
		return degrees * (float) Math.PI / 180;
	}

	protected void setRotation(ModelRenderer model, float rotX, float rotY, float rotZ)
	{
		model.rotateAngleX = degToRad(rotX);
		model.rotateAngleY = degToRad(rotY);
		model.rotateAngleZ = degToRad(rotZ);
	}

	// spin methods are good for testing and debug rotation points and offsets
	// in the model
	protected void spinX(ModelRenderer model)
	{
		model.rotateAngleX += degToRad(0.5F);
	}

	protected void spinY(ModelRenderer model)
	{
		model.rotateAngleY += degToRad(0.5F);
	}

	protected void spinZ(ModelRenderer model)
	{
		model.rotateAngleZ += degToRad(0.5F);
	}
}
