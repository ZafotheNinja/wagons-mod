package com.shultzy88.wagons.model;

import net.minecraft.client.model.ModelBase;
import net.minecraft.client.model.ModelRenderer;
import net.minecraft.entity.Entity;

import org.lwjgl.opengl.GL11;

import com.shultzy88.wagons.entity.EntityCoveredWagon;

import cpw.mods.fml.relauncher.Side;
import cpw.mods.fml.relauncher.SideOnly;

@SideOnly(Side.CLIENT)
public class ModelCoveredWagon extends ModelBase
{
	// Chassis with floor, sides and seat
	public ModelRenderer wagonBase;

	public ModelRenderer coverBase; // bottom sections
	public ModelRenderer coverMid; 	// middle section diagaonal on Z-axis
	public ModelRenderer coverTop;	// top section

	public ModelRenderer frontAxle;
	public ModelRenderer backAxle;

	public ModelRenderer wheel1; // wheel on front left
	public ModelRenderer wheel2; // wheel on front right
	public ModelRenderer wheel3; // wheel on back left
	public ModelRenderer wheel4; // wheel on back right

	protected int cycleIndex = 0;

	protected float[] undulationCycle = { 0F, 45F, 90F, 135F, 180F, 225F, 270F, 315F };

	public ModelCoveredWagon()
	{
		textureWidth = 256;
		textureHeight = 256;

		setTextureOffset("wagonbase.floor", 72, 0);
		setTextureOffset("wagonbase.frontpanel", 0, 0);
		setTextureOffset("wagonbase.backpanel", 0, 0);
		setTextureOffset("wagonbase.leftpanel", 0, 0);
		setTextureOffset("wagonbase.rightpanel", 0, 0);
		setTextureOffset("wagonbase.footrest", 0, 0);
		setTextureOffset("wagonbase.seat", 0, 0);
		setTextureOffset("wagonbase.backrest", 0, 0);
		setTextureOffset("coverbot.left", 0, 0);
		setTextureOffset("coverbot.right", 0, 0);
		setTextureOffset("covermid.left", 0, 0);
		setTextureOffset("covermid.right", 0, 0);
		setTextureOffset("frontaxle.main", 0, 0);
		setTextureOffset("frontaxle.tongue", 0, 0);
		setTextureOffset("backaxle.main", 0, 0);
		setTextureOffset("wheelfrontleft.hub", 0, 0); // wheel front left
		setTextureOffset("wheelfrontleft.spoke1", 0, 0);
		setTextureOffset("wheelfrontleft.spoke2", 0, 0);
		setTextureOffset("wheelfrontleft.spoke3", 0, 0);
		setTextureOffset("wheelfrontleft.spoke4", 0, 0);
		setTextureOffset("wheelfrontleft.rim1", 0, 0);
		setTextureOffset("wheelfrontleft.rim2", 0, 0);
		setTextureOffset("wheelfrontleft.rim3", 0, 0);
		setTextureOffset("wheelfrontleft.rim4", 0, 0);
		setTextureOffset("wheelfrontright.hub", 0, 0); // wheel front right
		setTextureOffset("wheelfrontright.spoke1", 0, 0);
		setTextureOffset("wheelfrontright.spoke2", 0, 0);
		setTextureOffset("wheelfrontright.spoke3", 0, 0);
		setTextureOffset("wheelfrontright.spoke4", 0, 0);
		setTextureOffset("wheelfrontright.rim1", 0, 0);
		setTextureOffset("wheelfrontright.rim2", 0, 0);
		setTextureOffset("wheelfrontright.rim3", 0, 0);
		setTextureOffset("wheelfrontright.rim4", 0, 0);
		setTextureOffset("wheelbackleft.hub", 0, 0); // wheel back left
		setTextureOffset("wheelbackleft.spoke1", 0, 0);
		setTextureOffset("wheelbackleft.spoke2", 0, 0);
		setTextureOffset("wheelbackleft.spoke3", 0, 0);
		setTextureOffset("wheelbackleft.spoke4", 0, 0);
		setTextureOffset("wheelbackleft.rim1", 0, 0);
		setTextureOffset("wheelbackleft.rim2", 0, 0);
		setTextureOffset("wheelbackleft.rim3", 0, 0);
		setTextureOffset("wheelbackleft.rim4", 0, 0);
		setTextureOffset("wheelbackright.hub", 0, 0); // wheel back right
		setTextureOffset("wheelbackright.spoke1", 0, 0);
		setTextureOffset("wheelbackright.spoke2", 0, 0);
		setTextureOffset("wheelbackright.spoke3", 0, 0);
		setTextureOffset("wheelbackright.spoke4", 0, 0);
		setTextureOffset("wheelbackright.rim1", 0, 0);
		setTextureOffset("wheelbackright.rim2", 0, 0);
		setTextureOffset("wheelbackright.rim3", 0, 0);
		setTextureOffset("wheelbackright.rim4", 0, 0);

		// main section of wagon
		wagonBase = new ModelRenderer(this, "wagonbase");
		wagonBase.setRotationPoint(0F, 8F, -15F);
		wagonBase.addBox("floor", -16F, -4F, -10F, 32, 1, 48);
		wagonBase.addBox("frontpanel", -15F, -13F, -10F, 30, 9, 1);
		wagonBase.addBox("backpanel", -15F, -15F, 37F, 30, 11, 1);
		wagonBase.addBox("leftpanel", 15F, -15F, -10F, 1, 11, 48);
		wagonBase.addBox("rightpanel", -16F, -15F, -10F, 1, 11, 48);
		wagonBase.addBox("footrest", -12F, -9F, -16F, 24, 1, 6);
		wagonBase.addBox("seat", -15F, -13F, -9F, 30, 1, 6);
		wagonBase.addBox("backrest", -15F, -19F, -3F, 30, 6, 1);
		// wagonBase.addBox("topcover", -15F, -38F, -4F, 30, 1, 42);

		coverBase = new ModelRenderer(this, "coverbot");
		coverBase.setRotationPoint(0F, 8F, -15F);
		coverBase.addBox("left", 15F, -26F, -4F, 1, 16, 42);
		// coverBase.addBox("right", -16F, -26F, -4F, 1, 16, 42);

		coverMid = new ModelRenderer(this, "covermid");
		coverMid.setRotationPoint(0F, 8F, -15F);
		coverMid.rotateAngleZ = degToRad(45F);
		coverMid.addBox("left", -19F, -31F, -4F, 1, 10, 42);
		coverMid.addBox("right", -19F, -10F, -4F, 1, 10, 42);

		// front axle is allowed to rotate on y-axis a child of model renderer
		frontAxle = new ModelRenderer(this, "frontaxle");
		frontAxle.addBox("main", -19F, -2F, -1F, 38, 3, 2);
		frontAxle.addBox("tongue", -0.5F, -1F, -33F, 1, 1, 32);
		wagonBase.addChild(frontAxle);

		// back axle is static but is required to get proper wheel rotation
		backAxle = new ModelRenderer(this, "backaxle");
		backAxle.setRotationPoint(0F, 7F, 16F);
		backAxle.addBox("main", -19F, -1F, -1F, 38, 2, 2);

		// front wheels are children of the front axle box list
		wheel1 = new ModelRenderer(this, "wheelfrontleft");
		wheel1.addBox("hub", 19F, -1F, -1F, 2, 2, 2);
		wheel1.addBox("spoke1", 19F, -5F, -0.5F, 1, 4, 1);
		wheel1.addBox("spoke2", 19F, -0.5F, 1F, 1, 1, 4);
		wheel1.addBox("spoke3", 19F, 1F, -0.5F, 1, 4, 1);
		wheel1.addBox("spoke4", 19F, -0.5F, -5F, 1, 1, 4);
		wheel1.addBox("rim1", 19F, -6F, -5F, 1, 1, 10);
		wheel1.addBox("rim2", 19F, -5F, 5F, 1, 10, 1);
		wheel1.addBox("rim3", 19F, 5F, -5F, 1, 1, 10);
		wheel1.addBox("rim4", 19F, -5F, -6F, 1, 10, 1);
		frontAxle.addChild(wheel1);

		wheel2 = new ModelRenderer(this, "wheelfrontright");
		wheel2.addBox("hub", -21F, -1F, -1F, 2, 2, 2);
		wheel2.addBox("spoke1", -20F, -5F, -0.5F, 1, 4, 1);
		wheel2.addBox("spoke2", -20F, -0.5F, 1F, 1, 1, 4);
		wheel2.addBox("spoke3", -20F, 1F, -0.5F, 1, 4, 1);
		wheel2.addBox("spoke4", -20F, -0.5F, -5F, 1, 1, 4);
		wheel2.addBox("rim1", -20F, -6F, -5F, 1, 1, 10);
		wheel2.addBox("rim2", -20F, -5F, 5F, 1, 10, 1);
		wheel2.addBox("rim3", -20F, 5F, -5F, 1, 1, 10);
		wheel2.addBox("rim4", -20F, -5F, -6F, 1, 10, 1);
		frontAxle.addChild(wheel2);

		wheel3 = new ModelRenderer(this, "wheelbackleft");
		wheel3.addBox("hub", 19F, -1F, -1F, 2, 2, 2);
		wheel3.addBox("spoke1", 19F, -6F, -0.5F, 1, 5, 1);
		wheel3.addBox("spoke2", 19F, -0.5F, 1F, 1, 1, 5);
		wheel3.addBox("spoke3", 19F, 1F, -0.5F, 1, 5, 1);
		wheel3.addBox("spoke4", 19F, -0.5F, -6F, 1, 1, 5);
		wheel3.addBox("rim1", 19F, -7F, -6F, 1, 1, 12);
		wheel3.addBox("rim2", 19F, -6F, 6F, 1, 12, 1);
		wheel3.addBox("rim3", 19F, 6F, -6F, 1, 1, 12);
		wheel3.addBox("rim4", 19F, -6F, -7F, 1, 12, 1);
		backAxle.addChild(wheel3);

		wheel4 = new ModelRenderer(this, "wheelbackright");
		wheel4.addBox("hub", -21F, -1F, -1F, 2, 2, 2);
		wheel4.addBox("spoke1", -20F, -6F, -0.5F, 1, 5, 1);
		wheel4.addBox("spoke2", -20F, -0.5F, 1F, 1, 1, 5);
		wheel4.addBox("spoke3", -20F, 1F, -0.5F, 1, 5, 1);
		wheel4.addBox("spoke4", -20F, -0.5F, -6F, 1, 1, 5);
		wheel4.addBox("rim1", -20F, -7F, -6F, 1, 1, 12);
		wheel4.addBox("rim2", -20F, -6F, 6F, 1, 12, 1);
		wheel4.addBox("rim3", -20F, 6F, -6F, 1, 1, 12);
		wheel4.addBox("rim4", -20F, -6F, -7F, 1, 12, 1);
		backAxle.addChild(wheel4);
	}

	@Override
	public void render(Entity entity, float time, float swingSuppress, float par4,
			float parAngleY, float parAngleX, float par7)
	{
		renderCoveredWagon((EntityCoveredWagon) entity,
				time,
				swingSuppress,
				par4,
				parAngleY,
				parAngleX,
				par7);

	}

	private void renderCoveredWagon(EntityCoveredWagon entity, float time,
			float swingSuppress, float par4, float parAngleY, float parAngleX, float par7)
	{
		GL11.glPushMatrix();
		wagonBase.render(par7);
		coverBase.render(par7);
		backAxle.render(par7);
		GL11.glPopMatrix();
	}

	@Override
	public void setRotationAngles(float time, float swingSuppress, float par3,
			float angleY, float angleX, float par6, Entity entity)
	{

	}

	/**
	 * Convert degrees to radians
	 * 
	 * @param degrees
	 * @return
	 */
	private float degToRad(float degrees)
	{
		return degrees * (float) Math.PI / 180;
	}

	protected void setRotation(ModelRenderer model, float rotX, float rotY, float rotZ)
	{
		model.rotateAngleX = degToRad(rotX);
		model.rotateAngleY = degToRad(rotY);
		model.rotateAngleZ = degToRad(rotZ);
	}

	// spin methods are good for testing and debug rotation points and offsets
	// in the model
	protected void spinX(ModelRenderer model)
	{
		model.rotateAngleX += degToRad(0.5F);
	}

	protected void spinY(ModelRenderer model)
	{
		model.rotateAngleY += degToRad(0.5F);
	}

	protected void spinZ(ModelRenderer model)
	{
		model.rotateAngleZ += degToRad(0.5F);
	}
}
