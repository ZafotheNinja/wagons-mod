package com.shultzy88.wagons.model;

import net.minecraft.client.model.ModelBase;
import net.minecraft.client.model.ModelRenderer;
import net.minecraft.entity.Entity;

import org.lwjgl.opengl.GL11;

import com.shultzy88.wagons.entity.EntityCoveredWagon;

public class ModelCoveredWagon extends ModelBase
{
	// chassis
	public ModelRenderer wagonBase;

	public ModelRenderer seatBot;
	public ModelRenderer seatMid;
	public ModelRenderer seatTop;

	public ModelRenderer sidePanel;

	public ModelRenderer frontAxle;

	public ModelRenderer wheel3; // wheel on back left
	public ModelRenderer wheel4; // wheel on back right
	public ModelRenderer wheel1; // wheel on front left
	public ModelRenderer wheel2; // wheel on front right

	public int textureWidth = 256;
	public int textureHeight = 128;

	protected int cycleIndex = 0;

	protected float[] undulationCycle = { 0F, 45F, 90F, 135F, 180F, 225F, 270F, 315F };

	public ModelCoveredWagon()
	{
		wagonBase = new ModelRenderer(this, 96, 0); // floor or chassis
		wagonBase.addBox(-16F, -1F, -24F, 32, 1, 48);
		wagonBase.setRotationPoint(0F, 6F, 0F);
		wagonBase.setTextureSize(textureWidth, textureHeight);
		wagonBase.setTextureOffset(0, 0).addBox(-19F, 0F, 17F, 38, 2, 2); // back axle

		// this is allowed to rotate on y-axis as rounding a turn
		frontAxle = new ModelRenderer(this, 0, 14);
		frontAxle.addBox(-19F, 0F, -16F, 38, 2, 2);
		frontAxle.setRotationPoint(0F, 8F, 0F);
		frontAxle.setTextureSize(textureWidth, textureHeight);

		wheel1 = new ModelRenderer(this, 15, 0); // front left
		wheel1.addBox(0F, -1.5F, -2F, 2, 3, 3);
		wheel1.setRotationPoint(19F, 9F, -16F);
		wheel1.setTextureSize(textureWidth, textureHeight);

		wheel2 = new ModelRenderer(this, 15, 0); // front right
		wheel2.addBox(-2F, -1.5F, -2F, 2, 3, 3);
		wheel2.setRotationPoint(-19F, 9F, -16F);
		wheel2.setTextureSize(textureWidth, textureHeight);

		wheel3 = new ModelRenderer(this, 15, 0); // back left
		wheel3.addBox(0F, -1.5F, -1.5F, 2, 3, 3);
		wheel3.setRotationPoint(19F, 9F, 18F);
		wheel3.setTextureSize(textureWidth, textureHeight);
		wheel3.addBox(0F, -5.5F, -1F, 1, 4, 2);

		wheel4 = new ModelRenderer(this, 15, 0); // back right
		wheel4.addBox(-2F, -1.5F, -2F, 2, 3, 3);
		wheel4.setRotationPoint(-19F, 9F, 18F);
		wheel4.setTextureSize(textureWidth, textureHeight);

		spoke1BL = new ModelRenderer(this, 0, 0);
		spoke1BL.addBox(0F, -5.5F, -1F, 1, 4, 2);
		// wheel5.addChild(spoke1BL);

		spoke2BL = new ModelRenderer(this, 0, 0);
		spoke2BL.addBox(0F, -6.5F, 0F, 1, 5, 2);
		spoke2BL.rotateAngleX = this.degToRad(undulationCycle[2]);
		// wheel5.addChild(spoke2BL);

		spoke3BL = new ModelRenderer(this, 0, 0);
		spoke3BL.addBox(0F, -6.5F, 0F, 1, 5, 2);
		spoke3BL.rotateAngleX = this.degToRad(undulationCycle[4]);
		// hubBL.addChild(spoke3BL);

		spoke4BL = new ModelRenderer(this, 0, 0);
		spoke4BL.addBox(0F, -6.5F, 0F, 1, 5, 2);
		spoke4BL.rotateAngleX = this.degToRad(undulationCycle[6]);
		// hubBL.addChild(spoke4BL);

		spoke1BR = new ModelRenderer(this, 0, 0);
		spoke1BR.addBox(0F, -6.5F, -1F, 1, 5, 2);
		// hubBR.addChild(spoke1BR);

		spoke2BR = new ModelRenderer(this, 0, 0);
		spoke2BR.addBox(0F, -2F, -1F, 1, 4, 2);
		spoke2BR.rotateAngleX = this.degToRad(undulationCycle[2]);
		// hubBR.addChild(spoke2BR);

		spoke3BR = new ModelRenderer(this, 0, 0);
		spoke3BR.addBox(0F, -2F, -1F, 1, 4, 2);
		spoke3BR.rotateAngleX = this.degToRad(undulationCycle[4]);
		// hubBR.addChild(spoke3BR);

		spoke4BR = new ModelRenderer(this, 0, 0);
		spoke4BR.addBox(0F, -2F, -1F, 1, 4, 2);
		spoke4BR.rotateAngleX = this.degToRad(undulationCycle[6]);
		// hubBR.addChild(spoke4BR);

		spoke1FL = new ModelRenderer(this, 0, 0);
		spoke1FL.addBox(-1F, -2F, -1F, 1, 4, 2);
		// hubFL.addChild(spoke1FL);

		spoke2FL = new ModelRenderer(this, 0, 0);
		spoke2FL.addBox(0F, -2F, -1F, 1, 4, 2);
		spoke2FL.rotateAngleX = this.degToRad(undulationCycle[2]);
		// hubFL.addChild(spoke2FL);

		spoke3FL = new ModelRenderer(this, 0, 0);
		spoke3FL.addBox(-1F, -2F, -1F, 1, 4, 2);
		spoke3FL.rotateAngleX = this.degToRad(undulationCycle[4]);
		// hubFL.addChild(spoke1FL);

		spoke4FL = new ModelRenderer(this, 0, 0);
		spoke4FL.addBox(-1F, -2F, -1F, 1, 4, 2);
		spoke4FL.rotateAngleX = this.degToRad(undulationCycle[6]);
		// hubFL.addChild(spoke4FL);

		spoke1FR = new ModelRenderer(this, 0, 0);
		spoke1FR.addBox(0F, -2F, -1F, 1, 4, 2);
		// hubFL.addChild(spoke1FL);

		spoke2FR = new ModelRenderer(this, 0, 0);
		spoke2FR.addBox(0F, -2F, -1F, 1, 4, 2);
		spoke2FR.rotateAngleX = this.degToRad(undulationCycle[2]);
		// hubFR.addChild(spoke2FR);

		spoke3FR = new ModelRenderer(this, 0, 0);
		spoke3FR.addBox(0F, -2F, -1F, 1, 4, 2);
		spoke3FR.rotateAngleX = this.degToRad(undulationCycle[4]);
		// hubFR.addChild(spoke3FR);

		spoke4FR = new ModelRenderer(this, 0, 0);
		spoke4FR.addBox(0F, -2F, -1F, 1, 4, 2);
		spoke4FR.rotateAngleX = this.degToRad(undulationCycle[6]);
		// hubFR.addChild(spoke4FR);

		wheel1BL = new ModelRenderer(this, 0, 0);
		wheel1BL.addBox(0F, -7F, -6F, 1, 1, 12);
		// wheel5.addChild(wheel1BL);

		wheel2BL = new ModelRenderer(this, 0, 0);
		wheel2BL.addBox(0F, -7F, -6F, 1, 1, 12);
		wheel2BL.rotateAngleX = this.degToRad(undulationCycle[2]);
		// wheel5.addChild(wheel2BL);

		wheel3BL = new ModelRenderer(this, 0, 0);
		wheel3BL.addBox(0F, -7F, -6F, 1, 1, 12);
		wheel3BL.rotateAngleX = this.degToRad(undulationCycle[4]);
		// wheel5.addChild(wheel3BL);

		wheel4BL = new ModelRenderer(this, 0, 0);
		wheel4BL.addBox(0F, -7F, -6F, 1, 1, 12);
		wheel4BL.rotateAngleX = this.degToRad(undulationCycle[6]);
		// wheel5.addChild(wheel4BL);

		wheel1BR = new ModelRenderer(this, 0, 0);
		wheel1BR.addBox(0F, -6F, -6F, 1, 1, 12);
		// hubBR.addChild(wheel1BR);

		wheel2BR = new ModelRenderer(this, 0, 0);
		wheel2BR.addBox(0F, -6F, -6F, 1, 1, 12);
		wheel2BR.rotateAngleX = this.degToRad(undulationCycle[2]);
		// hubBR.addChild(wheel2BR);

		wheel3BR = new ModelRenderer(this, 0, 0);
		wheel3BR.addBox(0F, -6F, -6F, 1, 1, 12);
		wheel3BR.rotateAngleX = this.degToRad(undulationCycle[4]);
		// hubBR.addChild(wheel3BR);

		wheel4BR = new ModelRenderer(this, 0, 0);
		wheel4BR.addBox(0F, -6F, -6F, 1, 1, 12);
		wheel4BR.rotateAngleX = this.degToRad(undulationCycle[6]);
		// hubBR.addChild(wheel4BR);

		wheel1FL = new ModelRenderer(this, 0, 0);
		wheel1FL.addBox(-1F, -6F, -6F, 1, 1, 12);
		// hubFL.addChild(wheel1FL);

		wheel2FL = new ModelRenderer(this, 0, 0);
		wheel2FL.addBox(-1F, -6F, -6F, 1, 1, 12);
		wheel2FL.rotateAngleX = this.degToRad(undulationCycle[2]);
		// hubFL.addChild(wheel2FL);

		wheel3FL = new ModelRenderer(this, 0, 0);
		wheel3FL.addBox(-1F, -6F, -6F, 1, 1, 12);
		wheel3FL.rotateAngleX = this.degToRad(undulationCycle[4]);
		// hubFL.addChild(wheel3FL);

		wheel4FL = new ModelRenderer(this, 0, 0);
		wheel4FL.addBox(-1F, -6F, -6F, 1, 1, 12);
		wheel4FL.rotateAngleX = this.degToRad(undulationCycle[6]);
		// hubFL.addChild(wheel4FL);

		wheel1FR = new ModelRenderer(this, 0, 0);
		wheel1FR.addBox(0F, -6F, -6F, 1, 1, 12);
		// hubFR.addChild(wheel1FR);

		wheel2FR = new ModelRenderer(this, 0, 0);
		wheel2FR.addBox(0F, -6F, -6F, 1, 1, 12);
		wheel2FR.rotateAngleX = this.degToRad(undulationCycle[2]);
		// hubFR.addChild(wheel2FR);

		wheel3FR = new ModelRenderer(this, 0, 0);
		wheel3FR.addBox(0F, -6F, -6F, 1, 1, 12);
		wheel3FR.rotateAngleX = this.degToRad(undulationCycle[4]);
		// hubFR.addChild(wheel3FR);

		wheel4FR = new ModelRenderer(this, 0, 0);
		wheel4FR.addBox(0F, -6F, -6F, 1, 1, 12);
		wheel4FR.rotateAngleX = this.degToRad(undulationCycle[6]);
		// hubFR.addChild(wheel4FR);
	}

	@Override
	public void render(Entity entity, float time, float swingSuppress, float par4,
			float parAngleY, float parAngleX, float par7)
	{
		renderCoveredWagon((EntityCoveredWagon) entity, time, swingSuppress, par4,
				parAngleY, parAngleX, par7);

	}

	private void renderCoveredWagon(EntityCoveredWagon entity, float time,
			float swingSuppress, float par4, float parAngleY, float parAngleX, float par7)
	{
		GL11.glPushMatrix();
		wagonBase.render(par7);
		// seatBot.render(par7);
		// seatMid.render(par7);
		// seatTop.render(par7);
		// frontAxle.render(par7);
		// backAxle.render(par7);
		// sidePanel.render(par7);
		// yoke.render(par7);
		// tongue.render(par7);
		// wheel3.render(par7);
		// wheel4.render(par7);
		// wheel1.render(par7);
		// wheel2.render(par7);
		// coverRight.render(par7);
		// coverLeft.render(par7);
		// coverDiagRight.render(par7);
		// coverDiagLeft.render(par7);
		// coverTop.render(par7);
		// this.spinX(wheel3);
		GL11.glPopMatrix();
	}

	@Override
	public void setRotationAngles(float time, float swingSuppress, float par3,
			float angleY, float angleX, float par6, Entity entity)
	{

	}

	@Override
	protected void setTextureOffset(String textureName, int offsetX, int offsetY)
	{
		super.setTextureOffset(textureName, offsetX, offsetY);
	}

	/**
	 * Convert degrees to radians
	 * 
	 * @param degrees
	 * @return
	 */
	private float degToRad(float degrees)
	{
		return degrees * (float) Math.PI / 180;
	}

	protected void setRotation(ModelRenderer model, float rotX, float rotY, float rotZ)
	{
		model.rotateAngleX = degToRad(rotX);
		model.rotateAngleY = degToRad(rotY);
		model.rotateAngleZ = degToRad(rotZ);
	}

	// spin methods are good for testing and debug rotation points and offsets
	// in the model
	protected void spinX(ModelRenderer model)
	{
		model.rotateAngleX += degToRad(0.5F);
	}

	protected void spinY(ModelRenderer model)
	{
		model.rotateAngleY += degToRad(0.5F);
	}

	protected void spinZ(ModelRenderer model)
	{
		model.rotateAngleZ += degToRad(0.5F);
	}
}
